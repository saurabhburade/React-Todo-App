{"version":3,"sources":["components/InputField.js","components/AllTodo.js","App.js","serviceWorker.js","index.js"],"names":["InputField","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","editItem","event","setState","inputText","state","list","target","value","buttonValue","indexValue","deleteItem","defineProperty","splice","toConsumableArray","console","log","key","changeInput","addTodo","_this$setState2","concat","_this2","react_default","a","createElement","className","onChange","type","id","Button","variant","color","onClick","align","map","item","index","style","margin","Component","AllTodo","components_InputField","App","react","components_AllTodo","role","aria-label","React","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.19c84a47.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./css/abc.css\";\r\nimport Button from \"@material-ui/core/Button\";\r\nclass InputField extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      inputText: \"\",\r\n      list: [],\r\n      buttonValue: \"Add Todo\",\r\n      indexValue: 0\r\n    };\r\n  }\r\n  editItem = event => {\r\n    this.setState({\r\n      inputText: this.state.list[event.target.value],\r\n      buttonValue: \"Update\",\r\n      indexValue: event.target.value\r\n    });\r\n  };\r\n  deleteItem = event => {\r\n    this.setState({\r\n      list: this.state.list.splice(event.target.value, 1),\r\n      list: [...this.state.list]\r\n    });\r\n    console.log(this.state.list + \"<br>\" + event.target.key);\r\n  };\r\n  changeInput = event => {\r\n    this.setState({\r\n      inputText: event.target.value\r\n    });\r\n  };\r\n  addTodo = event => {\r\n    if (this.state.buttonValue == \"Update\") {\r\n      console.log(this.state.list);\r\n      this.setState({\r\n        list: [\r\n          this.state.list.splice(this.state.indexValue, 1, this.state.inputText)\r\n        ],\r\n        list: [...this.state.list],\r\n        buttonValue: \"Add Todo\",\r\n        inputText: \"\",\r\n        indexValue: -1\r\n      });\r\n    }\r\n    if (this.state.inputText === \"\") {\r\n      return null;\r\n    } else if (this.state.buttonValue == \"Add Todo\") {\r\n      this.setState({\r\n        inputText: \"\",\r\n        list: [this.state.inputText, ...this.state.list]\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"InputAndTodo\">\r\n        <div className=\"iptbtn\">\r\n          <textarea\r\n            value={this.state.inputText}\r\n            onChange={this.changeInput}\r\n            type=\"text\"\r\n            id=\"Input\"\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={this.addTodo}\r\n            id=\"btn\"\r\n          >\r\n            {this.state.buttonValue}\r\n         \r\n          </Button>\r\n        </div>\r\n        <div className=\"Todos\">\r\n          <h1 align=\"center\">Todo list</h1>\r\n          {this.state.list.map((item, index) => {\r\n            let delkey = index;\r\n            if (item == \"\") {\r\n              return null;\r\n            } else if (this.state.buttonValue == \"Update\") {\r\n              return (\r\n                <div>\r\n                  <h3 key={index + 1}>\r\n                    {index + 1} . {item} <br />\r\n                  </h3>\r\n                </div>\r\n              );\r\n            } else {\r\n              return (\r\n                <div>\r\n                  <h3 key={index + 1}>\r\n                    {index + 1} . {item} <br />\r\n                  </h3>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    className=\"Edit\"\r\n                    value={index}\r\n                    onClick={this.editItem}\r\n                  >\r\n                    Edit\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    style={{ margin: \"5px\" }}\r\n                    className=\"Delete\"\r\n                    value={index}\r\n                    onClick={this.deleteItem}\r\n                  >\r\n                    Delete\r\n                  </Button>\r\n                </div>\r\n              );\r\n            }\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputField;\r\n","import React, { Component } from 'react';\r\nimport InputField from './InputField';\r\n\r\nclass AllTodo extends Component {\r\n    render() {\r\n        return (\r\n          <div>\r\n          \r\n            <InputField />\r\n\r\n\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AllTodo;\r\n","import React, { Fragment } from \"react\";\r\nimport AllTodo from \"./components/AllTodo\";\r\nimport \"./app.css\";\r\nimport Button from \"@material-ui/core/Button\";\r\nclass App extends React.Component {\r\n  \r\n \r\n\r\n\r\n\r\n  render() {\r\n   return(\r\n        <Fragment>\r\n         \r\n            <div className=\"App\">\r\n              <h1 id=\"heading\">My Todo App</h1>\r\n            \r\n              <AllTodo />\r\n            </div>\r\n        <div className=\"footer\">\r\n         Made with  <span role=\"img\" aria-label=\"aria-label\">üòç</span>  by Saurabh Burade\r\n        </div>\r\n        \r\n        </Fragment>\r\n      );\r\n   \r\n    }\r\n  \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './app.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}